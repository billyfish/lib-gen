/*
** This file was generated by LibGen and is based upon the
** output from idltool.
*/

/*
 * :ts=4
 *  $VER: init.c $Revision$ (28-Feb-2015)
 *
 *  Copyright (c) 2015 Hyperion Entertainment CVBA.
 *  All Rights Reserved.
 *
 * $Id$
 *
 * $Log$
 *
 *
 */


#include <exec/exec.h>
#include <proto/exec.h>
#include <dos/dos.h>
#include <stdarg.h>

#define ALLOCATE_LIB_MANAGER_DATA (1)
#include "lib_init.h"

/* Version Tag */
STATIC CONST UBYTE USED verstag [] = VERSTAG;

/*
 * STATIC PROTOTYPES 
 */

STATIC uint32 _manager_Obtain (struct LibraryManagerInterface *Self);

STATIC uint32 _manager_Release (struct LibraryManagerInterface *Self);



/*
 * The system (and compiler) rely on a symbol named _start which marks
 * the beginning of execution of an ELF file. To prevent others from 
 * executing this library, and to keep the compiler/linker happy, we
 * define an empty _start symbol here.
 *
 * On the classic system (pre-AmigaOS 4.x) this was usually done by
 * moveq #0,d0
 * rts
 *
 */
int32 _start(void);

int32 _start(void)
{
    /* If you feel like it, open DOS and print something to the user */
    return RETURN_FAIL;
}




/*
 * DEFINITIONS 
 */


/* ------------------- Manager Interface ------------------------ */
/* These are generic. Replace if you need more fancy stuff */
STATIC uint32 _manager_Obtain (struct LibraryManagerInterface *Self)
{
	uint32 res;
	__asm__ __volatile__(
	"1:	lwarx	%0,0,%1\n"
	"addic	%0,%0,1\n"
	"stwcx.	%0,0,%1\n"
	"bne-	1b"
	: "=&r" (res)
	: "r" (&Self->Data.RefCount)
	: "cc", "memory");

	return res;
}


STATIC uint32 _manager_Release (struct LibraryManagerInterface *Self)
{
	uint32 res;
	__asm__ __volatile__(
	"1:	lwarx	%0,0,%1\n"
	"addic	%0,%0,-1\n"
	"stwcx.	%0,0,%1\n"
	"bne-	1b"
	: "=&r" (res)
	: "r" (&Self->Data.RefCount)
	: "cc", "memory");

	return res;
}


/* Manager interface vectors */
CONST APTR lib_manager_vectors [] =
{
	_manager_Obtain,
	_manager_Release,
	NULL,
	NULL,
	LibOpen,
	LibClose,
	LibExpunge,
	NULL,
	(APTR) -1
};


/* "__library" interface tag list */
CONST struct TagItem lib_managerTags [] =
{
	{ MIT_Name, (Tag) "__library" },
	{ MIT_VectorTable, (Tag) lib_manager_vectors},
	{ MIT_Version,	1 },
	{ TAG_DONE, 0 }
};
